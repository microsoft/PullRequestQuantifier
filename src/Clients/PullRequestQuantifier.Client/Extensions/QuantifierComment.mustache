### Pull Request Quantified (<span style="color:{{Color}}">{{Label}}</span>)

<details {{CollapsePullRequestQuantifiedSection}}>
    <summary display="inline"> <strong>Quantified details</strong></summary>
    <p />

```
Label               : {{Label}}
Diff                : +{{QuantifiedLinesAdded}} -{{QuantifiedLinesDeleted}}
Addition percentile : {{PercentileAddition}}%
Deletion percentile : {{PercentileDeletion}}%
Diff percentile     : {{FormulaPercentile}}%
```
</details>

------

<details {{CollapseChangesSummarySection}}>
    <summary display="inline"> <strong>Summary of changes in this pull request</strong></summary>
    <p />

```
Total files changed: {{TotalFilesChanged}}

Change summary by file extension:
{{Details}}
```
> Change counts may show up as 0 above, if these files are ignored by the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).
    
</details>

<p />

------

Was this comment helpful? <a href="{{FeedbackLinkUp}}" target="_blank" title="Thumbs up"><strong>:thumbsup:</strong></a> <a href="{{FeedbackLinkNeutral}}" target="_blank" title="Neutral"><strong>&nbsp;:ok_hand:</strong></a> <a href="{{FeedbackLinkDown}}" target="_blank" title="Thumbs down"><strong>&nbsp;:thumbsdown:</strong></a> (<a href="MAILTO:prquant@microsoft.com" title="Mail to prquant@microsoft.com">Email</a>)

[Customize this repository's PullRequestQuantifier]({{ContextFileLink}})

<details>
<summary display="inline"> <strong>Pull request optimization good practices</strong> </summary>

<p/>
<p/>

##### Why small changes matter:

- Time to review is less.
- Bugs are more likely to be detected.
- Share knowledge efficiently, small portions can always be assimilated better.
- Release fast to production. Small changes are always more likely to be reviewed faster with less iterations and therefore they can be released faster.
- Exercise your mind to divide big problems into smaller ones.

##### What can I do to optimize my changes:

- Quantify your PR accurately: exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: autogenerated code, docs, project IDE setting files, binaries, etc.
Check out the `Excluded` section from your `prquantifier.yaml` file.
- Split your problem into subproblems and try to code towards them.
- Don't refactor and code new features at the same time.

##### How to interpret the change counts in git diff output:

- One line was added: `+1 -0`
- One line was deleted: `+0 -1`
- One line was modified: `+1 -1` (git diff doesn't know about modified, it will interpret that line like one addition plus one deletion)

</details>
